// gewellt-eight
// (c) 2018 John Howard, orthopteroid@gmail.com
// MIT license

#define GLX_GLXEXT_PROTOTYPES
#define GL_GLEXT_PROTOTYPES
#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glext.h>
#include <glm/geometric.hpp>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/intersect.hpp>
#include <glm/gtx/matrix_transform_2d.hpp>
#include <glm/gtx/normal.hpp>
#include <glm/gtx/quaternion.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/trigonometric.hpp>
#include <glm/vec3.hpp>
#include <vector>
#include <memory>
#include <map>

// https://www.freetype.org/freetype2/docs/tutorial/step2.html
struct metric { // FT_Glyph_Metrics
    int8_t width;
    int8_t height;
    int8_t horiBearingX;
    int8_t horiBearingY;
    int8_t horiAdvance;
    int8_t vertBearingX;
    int8_t vertBearingY;
    int8_t vertAdvance;
};

// this is the default struct that gewellt produces for glyphs
template <int N = 8>
struct GlyphDef
{
    static constexpr int Indicies = N * 3;
    char c;
    metric m;
    GLshort t[ Indicies * 2 ]; // each index has an X and y component
};

// these glyphs were built using gewellt
GlyphDef<8> glyphArr[] = {
{ ' ',   7,9,15,9,38,-4,21,51,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  }
,{ '!',    7,42,16,42,38,-3,4,51,    2,22,0,21,5,22,1,11,7,3,2,0,1,6,1,0,5,0,4,20,4,26,3,23,7,37,0,42,0,36,0,20,2,10,5,23,1,12,5,5,5,15,1,22,1,30,7,27,}
,{ '-',    18,5,10,20,38,-9,23,51,    12,5,6,3,16,1,9,-1,0,2,8,5,9,0,13,1,10,3,0,1,0,0,8,0,18,5,18,5,18,5,17,1,7,0,18,0,17,11,17,11,8,12,16,0,18,4,12,5,}
,{ '.',    7,9,15,9,38,-4,21,51,    0,5,9,0,2,0,7,9,7,9,7,9,12,10,10,12,11,12,4,0,4,1,4,0,8,1,5,11,-3,3,6,7,6,7,2,8,18,9,21,5,21,8,7,8,7,3,7,3,}
,{ '/',    32,47,3,46,38,-16,2,51,    20,8,26,10,17,20,16,22,9,43,3,42,27,5,25,0,30,0,18,9,22,5,18,9,9,45,5,42,0,46,12,25,22,15,16,26,26,0,22,8,26,9,11,47,5,46,11,47,}
,{ '0',    31,44,4,43,38,-15,3,51,    12,17,13,26,20,19,24,17,31,18,26,30,2,38,17,44,0,9,15,44,31,17,27,39,13,18,12,25,20,25,2,2,31,11,21,1,24,6,25,19,31,15,4,2,1,19,16,1,}
,{ '1',    31,42,4,42,38,-15,4,51,    1,42,27,41,18,32,0,11,16,0,21,5,13,3,22,15,17,19,31,37,24,37,28,42,15,19,14,34,20,31,10,37,0,37,2,42,18,5,21,13,16,7,14,4,14,28,21,26,}
,{ '2',    29,43,5,43,38,-14,4,51,    8,36,28,43,4,42,29,43,27,38,21,39,12,0,0,6,4,13,6,35,26,17,25,9,6,1,23,1,28,14,23,38,13,38,28,43,0,43,0,38,4,43,13,24,0,38,4,43,}
,{ '3',    30,44,4,43,38,-15,3,51,    30,12,23,10,22,19,21,40,11,44,5,37,27,39,29,26,15,44,30,9,23,13,19,0,0,34,5,32,9,44,30,27,24,32,17,20,23,1,7,1,0,12,17,24,6,20,23,17,}
,{ '4',    32,42,3,42,38,-16,4,51,    18,34,32,32,20,14,19,42,22,27,27,40,29,1,20,0,11,13,10,33,0,32,8,13,19,27,5,29,17,34,25,23,19,13,25,7,17,9,7,16,10,21,17,9,26,2,23,12,}
,{ '5',    30,43,4,42,38,-15,4,51,    0,9,9,13,3,23,17,41,10,43,9,37,5,29,0,35,11,43,17,19,13,15,0,22,18,21,14,15,26,18,3,42,27,33,26,40,3,0,2,13,29,0,20,15,26,40,30,24,}
,{ '6',    29,44,5,43,38,-14,3,51,    21,15,7,17,24,23,26,41,10,43,27,30,16,6,28,9,20,1,22,16,29,27,23,34,20,1,8,1,17,5,6,2,0,17,15,3,2,4,8,26,1,32,2,26,2,38,16,44,}
,{ '7',    29,42,5,42,38,-14,4,51,    23,6,20,10,29,5,7,35,16,24,12,42,17,1,25,7,29,0,16,25,28,3,13,17,13,6,24,0,0,0,17,24,11,29,14,20,10,30,9,30,17,33,0,4,8,4,0,0,}
,{ '8',    30,44,4,43,38,-15,3,51,    15,21,2,10,3,18,6,43,26,42,3,35,2,41,11,18,0,26,5,24,24,21,30,4,21,21,30,26,26,42,27,36,21,43,18,37,30,9,20,0,4,2,5,14,12,0,0,6,}
,{ '9',    29,44,4,43,38,-15,3,51,    13,44,4,32,1,38,21,24,11,29,1,22,7,40,27,36,14,44,29,26,20,44,24,23,27,7,28,24,16,27,13,0,1,5,1,22,2,22,3,17,10,23,24,2,7,0,27,14,}
,{ '?',    31,43,3,43,38,-16,4,51,    16,28,27,11,31,14,29,30,26,31,31,28,29,17,27,13,30,8,2,4,1,15,15,0,17,42,12,33,11,42,23,7,8,3,20,0,11,35,26,15,13,26,31,7,27,16,20,0,}
,{ 'A',    38,42,0,42,38,-19,4,51,    6,42,8,34,2,41,33,30,12,29,28,20,26,18,30,40,38,42,32,27,30,26,28,19,20,6,30,19,25,22,10,25,11,6,20,1,12,0,26,13,22,0,17,26,0,42,9,18,}
,{ 'B',    31,42,5,42,38,-14,4,51,    25,24,13,15,0,21,25,42,13,39,26,33,22,6,28,8,21,24,16,41,0,41,0,16,22,19,31,29,27,39,19,0,3,1,26,9,21,2,28,6,24,7,0,28,11,0,0,0,}
,{ 'C',    32,44,4,43,38,-15,3,51,    15,3,9,2,6,9,0,22,15,44,3,37,28,3,19,2,29,13,4,14,0,21,6,32,0,18,9,0,6,18,21,5,7,2,21,0,31,30,25,42,10,42,1,16,7,4,2,9,}
,{ 'D',    30,42,5,42,38,-14,4,51,    27,7,30,32,22,24,0,42,16,40,2,32,0,30,9,3,0,0,10,0,25,4,27,16,0,42,1,12,7,26,29,31,17,42,24,26,19,40,20,34,10,39,0,0,12,0,15,6,}
,{ 'E',    30,42,5,42,38,-14,4,51,    30,0,20,7,0,0,8,39,0,42,1,10,0,6,11,20,0,26,-2,1,12,2,3,9,30,22,15,15,5,22,21,35,30,39,25,42,4,0,0,6,5,15,0,41,16,35,30,41,}
,{ 'F',    28,42,6,42,38,-13,4,51,    18,3,26,5,28,1,0,0,11,0,0,11,6,28,5,41,0,42,4,15,0,10,10,1,28,21,20,26,14,19,0,42,0,8,9,21,28,0,5,0,12,7,21,24,12,19,7,24,}
,{ 'G',    30,44,4,43,38,-15,3,51,    4,11,6,2,24,0,7,21,4,43,0,20,26,12,16,0,30,6,2,11,0,20,7,21,5,3,6,18,1,13,30,41,11,43,25,34,5,32,19,44,5,40,29,20,29,39,14,21,}
,{ 'H',    28,42,5,42,38,-14,4,51,    0,25,4,20,6,37,-2,11,7,17,3,0,0,13,0,26,21,20,0,23,7,40,0,42,22,42,22,22,28,27,25,0,28,9,19,5,27,42,22,40,27,30,27,0,27,26,15,22,}
,{ 'I',    26,42,6,42,38,-13,4,51,    9,12,16,8,15,19,3,41,24,36,26,42,10,27,19,39,9,31,0,37,0,42,13,38,16,35,9,26,16,20,5,42,18,39,11,31,10,26,10,13,16,20,26,0,0,0,11,12,}
,{ 'J',    25,43,6,42,38,-13,4,51,    12,42,22,39,25,22,7,0,22,0,12,7,24,24,21,27,22,18,25,23,19,31,17,29,18,43,1,29,2,39,25,0,20,32,17,1,20,30,20,30,14,35,24,8,24,22,21,23,}
,{ 'K',    34,42,5,42,38,-14,4,51,    10,19,0,25,7,28,22,30,24,40,33,42,7,23,0,12,0,30,26,33,20,36,19,26,7,29,0,24,0,42,0,42,4,33,7,40,18,31,6,19,26,0,5,22,-2,8,5,1,}
,{ 'L',    27,42,7,42,38,-12,4,51,    6,32,4,30,4,35,0,0,5,0,5,16,18,42,12,37,22,37,25,35,26,42,18,42,6,42,18,41,9,35,7,29,0,34,1,18,0,41,1,27,8,41,0,1,7,21,0,24,}
,{ 'M',    30,42,4,42,38,-15,4,51,    5,0,-2,10,15,16,6,13,21,17,15,29,24,0,29,5,16,17,6,16,0,7,0,39,3,20,5,41,0,41,29,0,29,36,22,20,16,17,21,17,21,13,26,23,30,41,24,41,}
,{ 'N',    28,42,5,42,38,-14,4,51,    0,41,5,41,0,32,24,27,22,0,28,1,9,18,17,24,7,4,0,34,0,21,7,18,27,10,27,42,21,27,22,42,8,12,28,41,-1,36,5,23,4,38,0,28,0,0,11,1,}
,{ 'O',    32,44,3,43,38,-16,3,51,    0,31,10,44,18,40,0,32,4,24,7,34,15,3,31,15,24,1,5,25,0,14,1,32,7,8,25,1,7,1,32,28,25,30,27,1,7,2,0,14,6,27,26,40,31,26,12,44,}
,{ 'P',    30,42,5,42,38,-14,4,51,    0,33,7,10,0,0,4,6,0,0,18,0,29,16,19,26,3,24,4,18,12,21,0,33,21,26,24,0,30,14,15,0,28,4,7,6,0,41,0,30,7,41,5,28,6,38,0,33,}
,{ 'Q',    32,55,3,43,38,-16,-2,51,    8,33,1,34,0,15,23,10,29,8,32,26,21,43,7,34,6,41,0,12,10,0,4,28,24,36,12,41,21,55,32,27,26,15,23,43,8,31,6,39,2,34,26,2,7,0,29,12,}
,{ 'R',    33,42,5,42,38,-14,4,51,    0,10,0,40,10,22,31,42,1,2,0,12,24,8,20,24,31,12,0,0,29,1,0,8,23,0,32,14,18,4,4,29,6,42,0,42,21,18,12,20,20,27,16,31,30,37,28,42,}
,{ 'S',    32,44,3,43,38,-16,3,51,    22,3,29,4,28,14,0,29,3,41,14,42,12,44,10,38,30,40,4,3,2,17,17,0,30,24,0,11,10,23,21,41,30,22,30,39,27,2,21,6,11,0,21,23,31,25,26,29,}
,{ 'T',    34,42,2,42,38,-17,4,51,    19,5,19,18,12,14,9,3,0,0,0,5,13,15,20,17,18,37,14,42,21,40,14,26,20,36,14,21,14,31,15,9,20,0,34,0,18,11,20,0,1,0,32,-1,26,4,33,4,}
,{ 'U',    30,43,4,42,38,-15,4,51,    4,20,5,30,0,31,8,22,0,28,1,5,23,42,22,36,3,40,24,15,30,0,24,0,30,31,24,14,22,42,22,9,29,4,29,28,12,41,0,24,1,37,0,0,0,17,10,3,}
,{ 'V',    38,42,0,42,38,-19,4,51,    27,10,32,15,25,25,13,37,17,35,12,28,11,24,15,32,9,26,21,42,26,27,12,39,31,22,21,32,25,18,9,10,4,12,19,41,26,11,33,16,34,0,0,0,7,0,8,17,}
,{ 'W',    38,42,0,42,38,-19,4,51,    0,0,7,1,4,23,19,9,12,20,28,35,11,26,13,39,18,18,38,9,34,0,29,13,6,7,9,32,3,26,7,42,4,27,17,39,33,28,35,10,28,14,32,18,32,41,20,41,}
,{ 'X',    36,42,1,42,38,-18,4,51,    32,0,22,19,18,13,35,40,15,20,30,42,19,14,12,24,23,22,1,40,12,26,6,42,1,0,22,29,9,0,19,20,7,41,11,25,17,22,28,32,22,22,31,0,24,3,33,5,}
,{ 'Y',    36,42,1,42,38,-18,4,51,    22,40,16,42,14,36,13,19,8,1,1,0,24,13,28,1,36,0,12,16,16,29,21,19,20,40,20,24,13,29,18,26,22,10,30,7,15,17,10,13,12,11,18,40,17,33,13,34,}
,{ 'Z',    34,42,2,42,38,-17,4,51,    32,35,34,42,0,41,25,13,14,0,33,0,24,4,12,0,0,4,25,16,23,9,11,21,6,42,17,17,0,38,4,40,20,38,11,36,10,22,21,17,12,29,12,24,8,25,7,30,}
,{ 'a',    32,36,4,35,38,-15,7,51,    30,36,24,22,15,30,16,36,2,33,0,23,8,0,23,2,0,10,24,7,19,15,27,16,7,25,2,22,3,29,27,8,20,13,19,0,20,14,0,26,3,16,15,15,27,14,25,29,}
,{ 'b',    29,47,5,46,38,-14,2,51,    8,44,19,47,23,41,6,13,7,0,0,1,19,7,25,43,29,23,0,2,9,16,4,32,25,4,18,4,17,4,12,11,8,16,22,13,10,44,1,10,1,45,29,33,22,31,21,47,}
,{ 'c',    30,36,4,35,38,-15,7,51,    28,23,27,31,16,36,9,2,0,12,5,4,24,11,18,0,30,7,15,-1,16,3,8,4,15,36,27,28,10,34,0,25,7,27,5,9,1,11,12,0,0,22,19,36,0,23,5,32,}
,{ 'd',    30,47,4,46,38,-15,2,51,    29,13,21,6,27,37,7,22,0,20,4,36,28,45,28,32,12,45,20,9,2,24,2,14,29,33,23,36,21,13,1,41,8,41,0,23,28,0,28,12,16,1,3,43,17,47,7,39,}
,{ 'e',    30,36,4,35,38,-15,7,51,    26,27,10,36,28,32,13,21,10,15,30,15,18,33,11,36,10,31,7,27,11,34,2,32,10,5,2,2,25,0,2,21,0,9,11,0,30,23,26,4,15,0,3,33,0,15,12,15,}
,{ 'f',    30,46,4,46,38,-15,2,51,    8,45,13,45,8,34,25,9,19,15,29,16,7,33,13,45,14,21,14,22,8,31,8,17,-1,12,13,21,22,12,16,0,7,7,30,2,2,17,-1,13,3,14,15,15,8,12,11,1,}
,{ 'g',    30,48,4,35,38,-15,1,51,    9,36,1,26,18,32,7,5,0,18,5,37,4,46,3,39,27,46,23,48,21,27,29,31,28,6,21,28,28,30,23,21,30,1,22,1,0,17,12,0,2,5,14,0,1,3,23,5,}
,{ 'h',    27,46,6,46,38,-13,2,51,    26,46,26,31,18,44,22,27,27,19,15,7,0,0,1,20,8,0,26,42,26,22,19,29,18,37,24,38,23,33,0,46,0,8,8,39,6,18,21,12,10,12,7,23,1,25,4,8,}
,{ 'i',    31,46,4,46,38,-15,2,51,    13,42,0,42,0,46,18,22,18,35,10,28,13,30,12,44,26,46,13,41,2,45,19,45,30,45,20,44,29,40,3,12,10,12,4,19,15,8,20,0,12,0,8,11,16,31,19,13,}
,{ 'j',    22,59,4,46,38,-15,-4,51,    5,18,4,12,22,12,17,51,0,56,16,59,20,31,19,23,21,25,22,32,15,30,17,18,22,32,19,59,14,44,19,10,22,0,15,0,17,25,15,42,22,35,14,15,22,12,20,29,}
,{ 'k',    29,46,7,46,38,-12,2,51,    18,14,12,27,29,10,15,19,8,27,14,28,17,29,8,27,19,40,0,0,4,14,6,0,18,34,20,45,27,46,6,46,-1,46,3,39,0,0,0,45,9,29,5,37,3,39,5,43,}
,{ 'l',    31,46,4,46,38,-15,2,51,    13,46,21,38,0,44,10,0,14,23,20,0,31,44,25,42,26,46,13,37,18,33,13,28,18,8,11,26,18,32,24,46,31,42,19,42,18,33,11,39,18,41,23,46,18,41,13,46,}
,{ 'm',    33,35,2,35,38,-17,8,51,    6,24,1,21,1,8,6,22,5,11,2,13,9,28,1,20,1,35,33,35,31,2,25,31,2,14,16,0,0,1,14,0,22,10,16,27,30,0,30,10,21,2,22,30,15,19,15,35,}
,{ 'n',    28,35,5,35,38,-14,8,51,    24,12,13,0,26,2,0,34,2,29,7,35,13,2,1,1,1,17,1,26,1,19,6,22,21,34,22,16,28,35,27,31,27,3,20,14,6,22,0,19,7,7,6,35,7,21,0,28,}
,{ 'o',    30,36,4,35,38,-15,7,51,    24,24,28,26,29,14,30,23,22,24,21,35,6,16,0,18,4,28,5,2,0,14,18,0,6,16,4,6,0,18,29,13,24,25,24,2,19,36,1,22,4,32,12,0,25,11,24,2,}
,{ 'p',    29,48,5,35,38,-14,1,51,    15,35,24,33,8,31,11,41,0,52,3,44,1,20,12,33,1,48,8,4,1,14,1,0,4,26,11,0,0,15,24,14,26,3,16,0,18,37,29,27,26,4,8,28,0,20,5,18,}
,{ 'q',    30,48,4,35,38,-15,1,51,    5,2,17,0,23,7,11,1,3,2,5,12,22,5,29,19,23,26,14,37,2,31,0,17,28,48,17,33,28,20,19,32,14,36,8,32,4,0,0,18,6,25,29,2,21,0,27,21,}
,{ 'r',    24,35,8,35,38,-11,8,51,    5,28,6,29,5,19,1,35,9,31,1,24,5,27,7,17,0,23,18,0,1,19,1,5,0,1,2,7,5,1,5,19,1,22,2,15,5,14,3,18,9,17,14,3,24,0,22,6,}
,{ 's',    27,36,6,35,38,-13,7,51,    9,14,25,19,26,29,13,36,25,31,24,24,1,6,3,15,15,20,4,2,11,3,8,6,7,4,4,10,2,2,4,34,0,27,20,34,26,8,3,1,20,1,5,20,0,22,5,20,}
,{ 't',    25,44,6,43,38,-13,3,51,    12,28,4,22,6,27,0,10,10,24,11,0,7,30,4,16,11,24,5,26,12,29,5,37,8,31,12,34,5,39,17,44,6,40,8,34,17,15,25,9,9,9,25,43,11,41,23,39,}
,{ 'u',    28,35,6,34,38,-13,8,51,    20,10,28,1,22,26,9,33,2,31,4,23,7,19,0,34,0,0,26,35,26,11,18,30,20,30,12,34,10,31,0,0,6,0,5,14,11,31,2,32,13,35,28,2,21,8,21,0,}
,{ 'v',    34,34,2,34,38,-17,8,51,    18,34,12,32,20,27,10,3,1,0,7,19,18,34,25,20,17,27,19,25,25,6,27,18,32,0,27,16,24,4,17,31,12,27,12,31,12,18,9,25,16,30,6,9,13,15,9,25,}
,{ 'w',    36,34,1,34,38,-18,8,51,    4,0,8,17,1,13,2,8,4,25,11,24,28,23,29,6,35,4,10,34,1,28,20,6,36,0,30,10,30,0,21,33,33,10,30,33,1,0,1,8,6,0,19,7,17,18,24,24,}
,{ 'x',    32,34,3,34,38,-16,8,51,    14,22,22,11,6,5,23,23,31,34,24,33,1,34,8,22,12,31,3,1,11,6,5,6,8,19,10,27,20,17,22,18,24,32,15,17,1,0,7,0,11,7,29,0,19,3,21,13,}
,{ 'y',    36,47,1,34,38,-18,2,51,    10,13,20,32,16,41,18,27,26,20,32,0,13,16,11,25,6,10,12,15,5,0,0,4,2,45,11,41,14,45,14,37,17,40,11,46,19,27,25,21,19,33,23,19,35,0,29,0,}
,{ 'z',    28,34,5,34,38,-14,8,51,    19,0,6,28,28,1,12,4,22,2,9,1,6,0,2,4,28,0,13,34,9,16,0,33,16,18,10,23,19,12,2,4,6,0,0,0,7,32,26,29,28,34,11,31,21,31,10,30,}
};

struct TextEditor
{
    std::map<char,GlyphDef<8>*> glyphmap;
    char buffer[80] = {0};
    int pos = 0;

    int postInc() { int p = pos; pos = std::min<int>(80-1,pos+1); return p; }
    int preDec() { return pos = std::max<int>(0,pos-1); }
    void type(char c) { buffer[postInc() ] = c; }
    void back() { buffer[preDec() ] = 0; }

    void init(GlyphDef<8>* pGlyphArr, uint count)
    {
        for(uint i=0;i<count;i++)
            glyphmap.insert( std::pair<char,GlyphDef<8>*>( pGlyphArr[i].c, pGlyphArr + i ) );
    }

    void render()
    {
        glLoadIdentity();

        glEnableClientState( GL_VERTEX_ARRAY );
        for(int i=0;i<80;i++)
        {
            if(buffer[i]==0) break; // quit rendering at \0
            auto iter = glyphmap.find(buffer[i]);
            if(iter==glyphmap.end()) continue; // skip unrecognized char
            auto pGlyph=iter->second;

            // each glyph has it's own coord origin, with TL zero, +ve down
            glPushMatrix();
            glScalef( 1, -1, 1 ); // make +ve down
            glTranslatef( GLfloat( pGlyph->m.horiBearingX ), -GLfloat( pGlyph->m.horiBearingY ), 0 ); // -y is move up
            glVertexPointer( 2, GL_SHORT, 0, pGlyph->t );
            glDrawArrays( GL_TRIANGLES, 0, GlyphDef<8>::Indicies );
            glPopMatrix();

            // now move the global origin for the next glyph
            glTranslatef( GLfloat(pGlyph->m.horiAdvance), 0, 0 ) ;
        }
        glDisableClientState( GL_VERTEX_ARRAY );
    }
};

//////////////////////

TextEditor editor;

int viewWidth = 700;
int viewHeight = 50;

void key(unsigned char c, int x, int y)
{
    if(c == 27)
        exit( 0 ); // esc quits
    else if(c==8)
        editor.back(); // backspace
    else
        editor.type( c ); // unrecognized letters will be ignored

    glutPostRedisplay();
}

void display(void)
{
    glColor3f(0,1,0);
    glClearColor(0,0,1,1);
    glClear(GL_COLOR_BUFFER_BIT);

    editor.render();

    glFlush();
}

void idle()
{
    glutDisplayFunc(display);
}

void reshape(int width, int height)
{
    glViewport(0,0,(GLsizei) width, (GLsizei) height);
}

int main(int argc, char **argv)
{
    struct timespec spec;
    clock_gettime( CLOCK_REALTIME, &spec );
    srand((unsigned int)spec.tv_nsec);

    editor.init( glyphArr, sizeof(glyphArr) / sizeof(GlyphDef<8>) );

    const char* sz = "Hello World!";
    while(*sz) editor.type( *( sz++ ));

    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_RGBA);
    glutInitWindowSize(viewWidth, viewHeight);
    glutCreateWindow("Font test");

    glViewport(0,0,(GLsizei) viewWidth, (GLsizei) viewHeight);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,viewWidth,0, viewHeight);
    glMatrixMode(GL_MODELVIEW);

    glEnable(GL_TEXTURE_2D);
    glDisable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);
    glutReshapeFunc(reshape);

    glutMainLoop();

    return(0);
}
