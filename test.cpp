// gewellt-eight
// (c) 2018 John Howard, orthopteroid@gmail.com
// MIT license

#define GLX_GLXEXT_PROTOTYPES
#define GL_GLEXT_PROTOTYPES
#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glext.h>
#include <glm/geometric.hpp>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/intersect.hpp>
#include <glm/gtx/matrix_transform_2d.hpp>
#include <glm/gtx/normal.hpp>
#include <glm/gtx/quaternion.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/trigonometric.hpp>
#include <glm/vec3.hpp>
#include <vector>
#include <memory>
#include <map>

// https://www.freetype.org/freetype2/docs/tutorial/step2.html
struct metric { // FT_Glyph_Metrics
    int8_t width;
    int8_t height;
    int8_t horiBearingX;
    int8_t horiBearingY;
    int8_t horiAdvance;
    int8_t vertBearingX;
    int8_t vertBearingY;
    int8_t vertAdvance;
};

// this is the default struct that gewellt produces for glyphs
template <int N = 8>
struct GlyphDef
{
    static constexpr int Indicies = N * 3;
    char c;
    metric m;
    GLshort t[ Indicies * 2 ]; // each index has an X and y component
};

// these glyphs were built using gewellt
GlyphDef<8> glyphArr[] = {
     { 'A', {38,42,0,42,38,-19,4,51,}, {24,25,1,39,7,25,21,0,37,42,24,27,22,14,19,5,22,5,21,2,15,0,7,28,0,2,0,3,0,0,25,42,26,7,26,6,0,5,0,5,3,5,27,21,27,21,17,3,} }
    ,{ 'B', {31,42,5,42,38,-14,4,51,}, {0,0,0,42,8,1,25,0,14,0,27,15,31,36,5,37,10,42,28,20,23,35,29,39,0,42,5,41,5,19,28,8,27,0,29,15,23,16,0,22,26,24,21,17,22,10,27,14,} }
    ,{ 'C', {32,44,4,43,38,-15,3,51,}, {23,10,2,13,29,9,22,29,4,8,10,15,21,0,4,0,32,11,5,26,7,38,3,36,24,19,25,24,24,16,12,42,0,22,0,22,9,0,3,37,0,13,30,40,11,43,0,36,} }
    ,{ 'D', {30,42,5,42,38,-14,4,51,}, {2,42,5,35,21,39,5,7,0,15,6,32,4,21,4,21,23,0,27,14,8,0,24,3,0,17,0,5,0,24,19,41,29,31,28,7,0,0,0,14,11,0,0,42,0,18,7,33,} }
    ,{ 'E', {30,42,5,42,38,-14,4,51,}, {0,41,9,35,30,41,0,0,9,21,0,42,18,38,18,40,21,7,25,6,30,0,0,2,28,17,5,24,0,26,6,18,22,7,22,7,5,31,2,40,15,2,9,19,18,22,26,19,} }
    ,{ 'F', {28,42,6,42,38,-13,4,51,}, {24,33,17,8,21,23,0,5,0,42,7,40,2,34,2,34,20,7,1,12,5,4,5,21,0,7,28,2,0,0,26,20,3,20,26,25,9,21,0,21,17,26,15,0,12,0,0,0,} }
    ,{ 'G', {30,44,4,43,38,-15,3,51,}, {15,27,15,20,28,22,9,3,1,32,0,11,0,32,0,26,0,21,0,3,28,7,20,0,18,18,1,6,14,15,30,35,23,43,26,16,7,35,1,33,5,17,11,43,0,33,27,41,} }
    ,{ 'H', {28,42,5,42,38,-14,4,51,}, {28,42,28,0,21,0,17,16,6,38,16,18,6,39,3,32,2,40,28,41,22,39,22,11,22,16,17,20,24,14,22,4,23,19,23,17,21,18,22,25,11,18,0,0,9,19,0,42,} }
    ,{ 'I', {26,42,6,42,38,-13,4,51,}, {13,33,3,41,26,41,10,7,8,0,12,13,0,0,6,5,22,4,12,19,11,21,5,37,15,24,17,24,20,23,15,4,10,8,15,34,14,30,10,8,10,35,26,1,26,5,2,0,} }
    ,{ 'J', {25,43,6,42,38,-13,4,51,}, {23,40,25,11,15,40,14,0,14,1,14,40,8,2,22,5,14,0,25,0,22,22,18,0,19,6,19,29,22,20,0,34,0,13,0,26,20,42,0,31,4,39,25,11,25,15,25,7,} }
    ,{ 'K', {34,42,5,42,38,-14,4,51,}, {22,4,25,0,30,3,0,0,6,37,0,42,21,19,21,5,21,25,30,42,9,19,21,26,6,2,4,23,0,0,21,30,4,13,21,29,5,0,26,0,8,0,23,4,13,21,0,27,} }
    ,{ 'L', {27,42,7,42,38,-12,4,51,}, {25,37,2,37,27,42,0,28,5,17,7,39,13,8,10,0,17,18,0,41,15,20,14,21,12,34,12,40,12,24,0,28,0,40,9,42,18,30,16,0,17,14,7,6,0,0,0,29,} }
    ,{ 'M', {30,42,4,42,38,-15,4,51,}, {5,2,0,12,4,30,0,42,5,41,0,5,12,25,18,27,6,8,15,28,30,0,22,0,0,11,0,0,6,1,6,0,12,16,6,9,30,38,24,35,27,3,8,16,5,9,17,38,} }
    ,{ 'N', {28,42,5,42,38,-14,4,51,}, {6,17,5,30,5,31,10,37,10,36,10,24,22,30,22,33,19,35,5,42,4,21,0,41,28,42,21,37,26,0,0,42,0,0,5,9,11,19,28,21,10,19,8,2,24,42,0,0,} }
    ,{ 'O', {32,44,3,43,38,-16,3,51,}, {19,25,6,39,7,38,31,21,25,10,28,43,4,7,12,1,28,0,32,19,29,17,22,12,8,1,1,41,1,12,18,0,32,21,28,5,0,30,7,41,22,44,25,34,30,38,15,41,} }
    ,{ 'P', {30,42,5,42,38,-14,4,51,}, {6,0,0,0,5,26,12,26,30,21,0,21,0,0,6,37,0,42,21,22,28,20,28,3,26,5,24,8,19,8,4,2,27,7,21,0,11,6,11,9,11,26,4,26,3,15,7,39,} }
    ,{ 'Q', {32,55,3,43,38,-16,-2,51,}, {3,22,12,0,2,6,1,10,12,44,2,36,26,51,25,2,25,16,10,2,27,9,21,0,26,37,31,20,25,2,29,55,19,52,10,38,5,14,2,26,0,35,31,29,16,41,17,47,} }
    ,{ 'R', {33,42,5,42,38,-14,4,51,}, {25,7,22,0,3,3,17,1,9,11,18,0,23,39,20,34,9,16,0,0,3,11,8,0,30,14,22,20,26,0,0,42,9,22,0,2,16,22,31,41,22,39,27,18,16,25,7,21,} }
    ,{ 'S', {32,44,3,43,38,-16,3,51,}, {3,15,16,0,4,4,20,44,30,23,29,38,32,11,25,2,12,0,11,28,14,23,24,7,14,9,17,11,27,22,0,12,32,27,7,20,5,42,23,42,0,32,5,11,23,8,23,8,} }
    ,{ 'T', {34,42,2,42,38,-17,4,51,}, {23,8,24,37,24,34,12,3,25,3,15,7,34,40,24,35,6,26,14,12,20,42,14,40,12,42,4,6,10,33,15,4,21,13,17,34,8,42,16,42,17,42,0,0,34,1,0,5,} }
    ,{ 'U', {30,43,4,42,38,-15,4,51,}, {30,21,30,21,17,35,9,31,10,20,11,7,0,27,3,40,16,42,26,38,26,30,13,43,0,22,6,8,5,33,3,28,0,28,0,22,30,0,23,4,27,43,0,22,7,5,0,0,} }
    ,{ 'V', {38,42,0,42,38,-19,4,51,}, {18,37,5,33,20,38,0,0,7,0,8,15,23,42,3,6,15,40,37,0,24,33,31,0,10,16,18,33,5,10,27,7,28,0,26,14,19,37,29,9,23,40,30,16,4,0,25,13,} }
    ,{ 'W', {38,42,0,42,38,-19,4,51,}, {17,42,30,33,36,29,13,41,17,22,6,41,38,0,29,42,31,2,21,18,23,40,31,41,0,2,7,0,8,42,17,7,17,7,19,10,30,22,27,22,0,25,24,13,14,13,14,28,} }
    ,{ 'X', {36,42,1,42,38,-18,4,51,}, {20,17,20,30,33,42,27,7,22,16,23,14,2,0,15,9,18,26,13,32,24,3,34,0,17,21,9,40,0,41,14,23,9,40,18,8,11,2,30,21,19,9,14,20,15,25,9,29,} }
    ,{ 'Y', {36,42,1,42,38,-18,4,51,}, {20,31,14,13,14,11,21,32,7,0,0,0,6,11,30,26,11,14,21,12,21,22,34,0,17,27,0,27,11,27,15,39,21,11,20,41,36,14,36,8,36,10,17,26,16,34,15,24,} }
    ,{ 'Z', {34,42,2,42,38,-17,4,51,}, {0,4,9,0,24,4,14,28,12,29,26,12,24,7,3,33,8,35,15,25,27,10,26,2,7,42,7,2,7,25,11,38,34,39,30,37,34,41,2,33,0,41,29,7,14,0,33,0,} }
    ,{ 'a', {32,36,4,35,38,-15,7,51,}, {27,0,23,0,4,0,10,0,3,7,25,0,23,27,10,35,5,34,31,7,23,17,25,14,28,36,24,1,19,29,0,29,9,33,1,16,22,14,3,23,3,16,22,9,16,2,22,2,} }
    ,{ 'b', {29,47,5,46,38,-14,2,51,}, {10,17,4,1,15,30,1,0,1,29,8,0,25,13,11,16,24,13,22,43,24,2,28,36,16,1,16,1,21,25,8,21,5,8,5,28,8,47,0,39,4,13,20,11,24,31,21,12,} }
    ,{ 'c', {30,36,4,35,38,-15,7,51,}, {5,14,2,21,7,0,27,4,30,12,17,2,5,8,0,24,0,12,24,0,8,1,3,8,29,25,20,36,14,34,26,36,20,36,10,36,21,7,23,2,24,0,14,36,4,31,1,18,} }
    ,{ 'd', {30,47,4,46,38,-15,2,51,}, {0,26,2,42,12,47,7,19,4,33,1,26,29,35,26,11,22,40,14,10,0,27,3,14,30,2,24,19,22,0,30,43,30,37,15,45,27,6,27,20,29,19,14,0,25,0,28,0,} }
    ,{ 'e', {30,36,4,35,38,-15,7,51,}, {10,35,1,6,1,27,8,34,28,28,21,36,5,16,13,19,28,15,10,16,22,16,7,15,4,18,4,7,8,18,0,20,0,10,0,6,21,1,0,10,8,1,22,0,30,12,25,22,} }
    ,{ 'f', {30,46,4,46,38,-15,2,51,}, {12,45,22,45,19,45,30,13,19,17,9,11,14,2,14,4,22,4,30,33,27,45,30,33,13,2,30,4,28,0,8,46,14,43,8,31,0,23,0,22,0,29,14,0,7,13,12,46,} }
    ,{ 'g', {30,48,4,35,38,-15,1,51,}, {9,2,23,2,24,2,30,20,30,16,30,18,28,32,20,6,29,0,24,1,23,40,25,33,28,31,16,47,26,44,7,47,4,0,0,18,20,29,16,34,4,33,20,0,4,8,5,0,} }
    ,{ 'h', {27,46,6,46,38,-13,2,51,}, {12,11,24,12,7,16,0,43,8,23,2,32,3,32,4,45,0,45,23,17,19,1,22,40,27,44,25,10,20,46,7,21,0,40,0,3,6,0,3,11,0,0,22,46,13,23,13,23,} }
    ,{ 'i', {31,46,4,46,38,-15,2,51,}, {29,39,20,40,31,46,16,5,17,3,13,10,5,4,20,4,20,5,19,34,16,35,16,44,24,14,2,15,8,11,21,41,22,45,2,45,11,29,5,26,3,25,20,27,13,10,13,44,} }
    ,{ 'j', {22,59,4,46,38,-15,-4,51,}, {17,3,17,13,16,6,20,6,21,0,15,2,4,43,1,47,10,38,4,19,13,9,4,19,2,12,15,18,21,12,8,58,20,51,1,56,21,54,15,17,21,12,16,55,21,54,16,24,} }
    ,{ 'k', {29,46,7,46,38,-12,2,51,}, {6,2,0,0,5,29,26,46,14,26,11,32,11,31,26,10,4,29,1,17,7,33,6,31,0,0,7,43,0,46,20,46,19,43,14,18,0,38,5,41,0,38,19,29,23,30,3,25,} }
    ,{ 'l', {31,46,4,46,38,-15,2,51,}, {28,31,28,0,28,41,14,41,11,46,25,23,30,43,11,40,16,46,14,40,24,42,24,41,8,29,6,21,6,21,18,6,3,0,18,0,13,45,0,45,0,40,12,3,16,46,19,13,} }
    ,{ 'm', {33,35,2,35,38,-17,8,51,}, {7,8,1,35,1,0,19,1,14,32,20,35,32,13,32,34,27,35,20,3,22,6,19,9,32,5,26,0,18,3,11,0,17,15,18,2,15,0,9,2,16,0,28,30,33,8,28,6,} }
    ,{ 'n', {28,35,5,35,38,-14,8,51,}, {20,0,23,29,28,7,0,15,2,35,7,33,0,18,2,22,8,33,7,9,6,30,0,14,22,26,23,28,23,27,1,0,1,12,20,0,27,34,22,31,28,10,24,32,21,33,23,33,} }
    ,{ 'o', {30,36,4,35,38,-15,7,51,}, {26,26,9,35,23,32,30,9,3,0,20,0,4,32,4,24,12,34,25,12,5,32,0,36,4,20,4,14,4,10,6,2,10,3,9,2,23,5,30,17,25,34,3,34,0,13,8,1,} }
    ,{ 'p', {29,48,5,35,38,-14,1,51,}, {9,5,11,2,17,1,17,1,25,2,29,20,5,21,20,37,23,40,1,29,8,40,1,6,17,38,28,13,26,31,1,48,8,47,2,28,7,1,7,34,0,1,9,41,17,26,10,39,} }
    ,{ 'q', {30,48,4,35,38,-15,1,51,}, {0,10,2,15,10,2,11,27,0,16,12,28,25,0,2,6,8,0,2,27,20,36,7,34,25,5,24,11,19,4,30,23,26,0,21,29,25,19,30,40,23,48,4,39,0,17,6,10,} }
    ,{ 'r', {24,35,8,35,38,-11,8,51,}, {5,35,1,30,7,5,14,12,10,8,3,1,4,35,0,18,4,35,0,4,22,27,19,24,7,5,1,0,1,30,7,0,3,5,7,0,5,16,5,19,5,19,24,1,7,9,12,0,} }
    ,{ 's', {27,36,6,35,38,-13,7,51,}, {1,30,14,35,24,32,22,31,27,24,21,16,22,19,10,14,20,22,16,20,1,14,2,5,13,35,4,33,4,32,4,0,20,0,3,7,18,23,27,31,15,20,24,8,18,0,10,0,} }
    ,{ 't', {25,44,6,43,38,-13,3,51,}, {5,18,15,8,6,0,23,38,8,42,25,42,11,14,7,25,2,41,13,0,11,0,9,3,8,11,23,13,23,8,13,2,4,23,9,11,6,40,13,41,4,7,10,28,8,23,9,8,} }
    ,{ 'u', {28,35,6,34,38,-13,8,51,}, {21,0,21,19,27,0,4,18,4,10,4,11,0,7,0,7,5,9,0,2,0,30,5,11,20,28,26,4,27,30,19,31,1,30,11,35,0,2,6,10,5,0,4,13,7,28,0,32,} }
    ,{ 'v', {34,34,2,34,38,-17,8,51,}, {6,12,15,13,25,14,33,0,26,0,22,25,6,2,10,26,18,33,13,29,24,12,25,10,5,0,9,20,0,0,13,0,3,1,3,0,15,34,22,31,23,13,23,12,21,19,25,5,} }
    ,{ 'w', {36,34,1,34,38,-18,8,51,}, {7,29,1,9,7,4,1,10,6,2,0,0,4,32,8,33,4,20,28,0,31,7,36,0,25,28,34,2,30,34,19,13,22,29,27,34,26,30,17,9,20,9,16,8,15,27,8,33,} }
    ,{ 'x', {32,34,3,34,38,-16,8,51,}, {20,13,20,13,7,5,11,0,16,8,23,19,0,28,0,14,0,14,10,28,21,2,30,0,6,34,14,19,0,32,6,26,14,19,13,15,32,34,14,12,23,32,18,21,8,0,1,0,} }
    ,{ 'y', {36,47,1,34,38,-18,2,51,}, {23,11,31,35,25,17,12,10,12,43,12,29,35,0,20,25,29,0,16,42,30,8,9,46,7,0,19,34,0,0,18,25,7,29,25,22,0,38,0,13,0,39,4,22,33,41,27,37,} }
    ,{ 'z', {28,34,5,34,38,-14,8,51,}, {27,2,20,0,13,19,11,30,3,34,3,34,5,30,6,29,22,14,0,34,4,24,12,24,8,33,6,30,21,31,4,24,13,22,16,9,25,0,7,4,0,1,14,33,28,33,26,28,} }
    ,{ '0', {31,44,4,43,38,-15,3,51,}, {9,1,25,2,6,7,29,7,21,3,29,35,13,17,11,28,19,23,10,44,0,30,2,4,12,32,17,20,7,44,30,4,29,4,31,4,8,43,22,42,30,32,8,33,15,44,14,43,} }
    ,{ '1', {31,42,4,42,38,-15,4,51,}, {31,3,26,19,31,3,1,9,17,1,20,8,18,10,14,7,14,35,14,35,19,3,19,36,0,36,0,42,7,39,30,37,23,36,30,41,0,23,0,38,0,36,30,41,5,41,16,35,} }
    ,{ '2', {29,43,5,43,38,-14,4,51,}, {21,39,20,37,15,27,29,14,8,35,25,7,11,25,0,39,3,43,29,43,24,38,0,40,29,5,11,5,17,5,21,0,28,8,2,0,17,21,8,33,16,20,1,8,11,0,5,13,} }
    ,{ '3', {30,44,4,43,38,-15,3,51,}, {25,20,25,16,21,4,26,0,9,0,18,0,17,4,17,0,22,4,3,5,5,12,15,0,30,31,7,43,24,42,9,22,25,15,18,22,21,22,9,22,28,27,20,2,26,16,28,3,} }
    ,{ '4', {32,42,3,42,38,-16,4,51,}, {13,11,5,22,10,13,0,32,22,32,11,27,11,12,22,1,24,0,3,0,29,0,13,0,4,7,0,40,0,40,26,7,21,0,24,10,21,0,20,39,28,32,2,33,23,0,4,22,} }
    ,{ '5', {30,43,4,42,38,-15,4,51,}, {11,18,0,26,3,0,21,4,4,0,4,5,20,41,26,23,29,35,24,5,11,1,28,0,30,36,8,39,23,37,23,18,25,23,28,33,23,16,30,27,9,16,3,40,19,42,1,32,} }
    ,{ '6', {29,44,5,43,38,-14,3,51,}, {23,25,29,31,21,43,2,5,0,24,7,34,16,19,29,30,25,19,4,13,11,3,6,3,9,16,25,15,5,22,8,37,3,25,2,35,4,0,27,9,20,0,24,41,10,42,0,35,} }
    ,{ '7', {29,42,5,42,38,-14,4,51,}, {19,8,12,42,8,37,0,0,1,5,28,0,29,12,26,12,15,12,24,0,15,27,29,0,20,12,18,14,16,23,26,0,21,0,16,0,7,4,23,1,22,5,29,4,26,6,29,0,} }
    ,{ '8', {30,44,4,43,38,-15,3,51,}, {2,14,1,6,10,17,4,36,10,17,0,30,18,23,1,14,21,21,0,33,23,43,4,40,22,0,29,11,21,20,25,0,3,9,6,1,3,25,10,7,0,31,21,43,25,21,30,34,} }
    ,{ '9', {29,44,4,43,38,-15,3,51,}, {25,1,9,0,7,7,1,20,8,29,23,26,0,17,4,20,1,10,24,31,22,3,29,18,12,43,1,36,23,40,25,37,18,39,28,24,29,21,19,23,19,24,9,0,4,23,1,7,} }
    ,{ ' ', {7,9,15,9,38,-4,21,51,}, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,} }
    ,{ '.', {7,9,15,9,38,-4,21,51,}, {5,4,0,8,5,9,2,0,6,0,4,0,3,9,4,9,0,7,0,6,4,2,5,1,6,9,4,1,7,0,7,9,0,9,0,9,7,2,4,0,7,3,0,0,0,9,5,3,} }
    ,{ '?', {31,43,3,43,38,-16,4,51,}, {27,0,23,0,25,0,18,39,11,36,12,42,19,3,31,15,26,2,5,21,5,23,5,30,13,26,17,38,31,11,26,17,30,7,27,16,9,16,22,33,29,42,28,0,5,2,0,12,} }
    ,{ '!', {7,42,16,42,38,-3,4,51,}, {2,23,2,17,1,36,7,3,7,12,7,25,0,39,0,39,4,37,5,28,2,27,5,25,0,2,7,0,2,33,0,42,0,35,4,40,3,35,4,42,6,38,4,36,4,24,4,8,} }
    ,{ '-', {18,5,10,20,38,-9,23,51,}, {1,5,1,4,1,5,0,5,0,1,9,0,18,1,18,1,18,0,15,0,7,2,4,0,7,0,17,0,7,0,18,0,1,3,8,5,17,4,17,0,9,5,18,0,14,1,16,0,} }
    ,{ '#', {35,42,1,42,38,-18,4,51,}, {3,16,0,13,29,14,33,5,11,27,5,33,16,0,13,1,11,13,24,26,35,27,31,28,9,17,11,15,10,28,7,30,24,26,0,27,20,40,27,17,25,10,28,11,29,0,27,5,} }
    ,{ '%', {38,44,0,43,38,-19,3,51,}, {7,41,3,41,24,14,22,18,35,1,23,13,37,26,35,44,31,23,23,22,25,36,19,37,3,0,4,17,0,14,28,43,31,42,20,39,10,27,7,15,7,8,11,19,15,2,18,17,} }
};

struct TextEditor
{
    std::map<char,GlyphDef<8>*> glyphmap;
    char buffer[80] = {0};
    int pos = 0;

    int postInc() { int p = pos; pos = std::min<int>(80-1,pos+1); return p; }
    int preDec() { return pos = std::max<int>(0,pos-1); }
    void type(char c) { buffer[postInc() ] = c; }
    void back() { buffer[preDec() ] = 0; }

    void init(GlyphDef<8>* pGlyphArr, uint count)
    {
        for(uint i=0;i<count;i++)
            glyphmap.insert( std::pair<char,GlyphDef<8>*>( pGlyphArr[i].c, pGlyphArr + i ) );
    }

    void render()
    {
        glLoadIdentity();

        glEnableClientState( GL_VERTEX_ARRAY );
        for(int i=0;i<80;i++)
        {
            if(buffer[i]==0) break; // quit rendering at \0
            auto iter = glyphmap.find(buffer[i]);
            if(iter==glyphmap.end()) continue; // skip unrecognized char
            auto pGlyph=iter->second;

            // each glyph has it's own coord origin, with TL zero, +ve down
            glPushMatrix();
            glScalef( 1, -1, 1 ); // make +ve down
            glTranslatef( GLfloat( pGlyph->m.horiBearingX ), -GLfloat( pGlyph->m.horiBearingY ), 0 ); // -y is move up
            glVertexPointer( 2, GL_SHORT, 0, pGlyph->t );
            glDrawArrays( GL_TRIANGLES, 0, GlyphDef<8>::Indicies );
            glPopMatrix();

            // now move the global origin for the next glyph
            glTranslatef( GLfloat(pGlyph->m.horiAdvance), 0, 0 ) ;
        }
        glDisableClientState( GL_VERTEX_ARRAY );
    }
};

//////////////////////

TextEditor editor;

int viewWidth = 700;
int viewHeight = 50;

void key(unsigned char c, int x, int y)
{
    if(c == 27)
        exit( 0 ); // esc quits
    else if(c==8)
        editor.back(); // backspace
    else
        editor.type( c ); // unrecognized letters will be ignored

    glutPostRedisplay();
}

void display(void)
{
    glColor3f(0,1,0);
    glClearColor(0,0,1,1);
    glClear(GL_COLOR_BUFFER_BIT);

    editor.render();

    glFlush();
}

void idle()
{
    glutDisplayFunc(display);
}

void reshape(int width, int height)
{
    glViewport(0,0,(GLsizei) width, (GLsizei) height);
}

int main(int argc, char **argv)
{
    struct timespec spec;
    clock_gettime( CLOCK_REALTIME, &spec );
    srand((unsigned int)spec.tv_nsec);

    editor.init( glyphArr, sizeof(glyphArr) / sizeof(GlyphDef<8>) );

    const char* sz = "Hello World!";
    while(*sz) editor.type( *( sz++ ));

    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_RGBA);
    glutInitWindowSize(viewWidth, viewHeight);
    glutCreateWindow("Font test");

    glViewport(0,0,(GLsizei) viewWidth, (GLsizei) viewHeight);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,viewWidth,0, viewHeight);
    glMatrixMode(GL_MODELVIEW);

    glEnable(GL_TEXTURE_2D);
    glDisable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);
    glutReshapeFunc(reshape);

    glutMainLoop();

    return(0);
}
